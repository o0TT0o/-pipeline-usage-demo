//ref
// https://www.jenkins.io/doc/book/pipeline/syntax/

pipeline{
    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '7')) 
        checkoutToSubdirectory('foo')
        disableConcurrentBuilds()
        disableResume() 
        //overrideIndexTriggers(true)
        //preserveStashes(buildCount: 5)
        quietPeriod(30)
        retry(3)
        skipDefaultCheckout()
        timeout(time: 1, unit: 'HOURS')
        parallelsAlwaysFailFast()
    }
    triggers {
        cron('H */4 * * 1-5')
    }
    //agent {label master}
    //agent {
    //    docker {
    //        image 'myregistry.com/node'
    //        label 'my-defined-label'
    //        registryUrl 'https://myregistry.com/'
    //        registryCredentialsId 'myPredefinedCredentialsInJenkins'
    //    }
    //}
    //agent {
    //    // Equivalent to "docker build -f Dockerfile.build --build-arg version=1.0.2 ./build/
    //    dockerfile {
    //        filename 'Dockerfile.build'
    //        dir 'build'
    //        label 'my-defined-label'
    //        additionalBuildArgs  '--build-arg version=1.0.2'
    //        args '-v /tmp:/tmp'
    //        registryUrl 'https://myregistry.com/'
    //        registryCredentialsId 'myPredefinedCredentialsInJenkins'
    //    }
    //}
    agent none
    stages {
        stage('Example Docker Agent') {
            agent { docker 'node:16.13.1-alpine' } 
            steps {
                echo 'Hello, Node'
                sh 'node -v'
            }
        }
        stage('Example Test') {
            agent { docker 'openjdk:8-jre' } 
            steps {
                echo 'Hello, JDK'
                sh 'java -version'
            }
        }
        stage('Example Env') {
            agent { docker 'node:16.13.1-alpine' } 
            environment { 
                AN_ACCESS_KEY = credentials('my-predefined-secret-text') 
            }
            steps {
                sh 'printenv'
            }
        }
        stage('Example Options') {
            agent { docker 'node:16.13.1-alpine' } 
            options {
                timestamps()
                timeout(time: 1, unit: 'MINUTES') 
                retry(10)
                
            }
            steps {
                echo 'Hello World'
            }
        }
        stage('Example Build') {
            agent { docker 'node:16.13.1-alpine' } 
            steps {
                echo 'Hello World'
            }
        }
        stage('Example Deploy') {
            agent { docker 'node:16.13.1-alpine' } 
            when {
                branch pattern: "main|master", comparator: "REGEXP"
            }
            steps {
                echo 'Deploying'
            }
        }
        stage('Non-Parallel Stage') {
            agent { docker 'node:16.13.1-alpine' } 
            steps {
                echo 'This stage will be executed first.'
            }
        }
        stage('Parallel Stage') {
            //agent { docker 'node:16.13.1-alpine' }  not allowed here
            when {
                //expression { BRANCH_NAME ==~ /(main|master)/ }
                anyOf { 
                    branch 'master'
                    environment name: 'CC', value: 'clang' 
                }
            }
            failFast true
            parallel {
                stage('Branch A') {
                    agent {
                        //label "for-branch-a"
                        docker 'node:16.13.1-alpine'
                    }
                    steps {
                        echo "On Branch A"
                    }
                }
                stage('Branch B') {
                    agent {
                        //label "for-branch-b"
                        docker 'openjdk:8-jre'
                    }
                    steps {
                        echo "On Branch B"
                    }
                }
                stage('Branch C') {
                    agent {
                        //label "for-branch-c"
                        docker 'nginx:latest'
                    }
                    stages {
                        stage('Nested 1') {
                            steps {
                                echo "In stage Nested 1 within Branch C"
                            }
                        }
                        stage('Nested 2') {
                            steps {
                                echo "In stage Nested 2 within Branch C"
                            }
                        }
                    }
                }
            }
        }
        stage('Example Steps') {
            agent { docker 'node:16.13.1-alpine' } 
            steps {
                echo 'Hello World'

                script {
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    }
                }
            }
        }
    }
    environment { 
        CC = 'clang'
    }

    post { 
        always { 
            echo 'I will always say Hello again!'
        }
    }
}
