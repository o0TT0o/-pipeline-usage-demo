//ref
// https://www.youtube.com/watch?v=j1lH3vOhucw&list=PLKaiHc24qCTSnXaus2t4b71ihq9k649XS&index=6
// https://www.jenkins.io/doc/book/pipeline/syntax/#agent-parameters

pipeline {
    agent none
    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '7')) 
        //checkoutToSubdirectory('foo')
        //disableConcurrentBuilds()
        //disableResume() 
        //overrideIndexTriggers(true)
        //preserveStashes(buildCount: 5)
        //quietPeriod(30)
        //retry(3)
        //skipDefaultCheckout()
        timeout(time: 24, unit: 'HOURS')
        //parallelsAlwaysFailFast()
    }
    stages{
        stage("Build & Test"){
            matrix {
	            agent{
	                dockerfile{
	        	        label "master"
                                filename 'Dockerfile.baseimages'
				dir 'docker'
	        	        additionalBuildArgs """
	                            --build-arg JAVA_VERSION=$JAVA \
	        	            --build-arg MAVEN_VERSION=$MAVEN \
	        	            --build-arg USER_UID=\$(id -u) \
	        	            --build-arg USER_NAME=lion \
	        	            --build-arg ALL_PROXY=socks5://192.168.1.123:1080 \
	        	            -t mymaven:${MAVEN}-jdk-${JAVA}
	        	        """.stripIndent().trim() 

	        	        //args "-v /tmp/maven:/home/jenkins/.m2"
	                } 
                }
                axes {
                    axis {
                        name 'JAVA'
                        values '11.0.16-amzn', '8.0.302-open', '11.0.12-open'
                    }
                    axis {
                        name 'MAVEN'
                        values '3.6.3'
                    }
                }
                stages {
	                stage("Build"){
	        	        steps{	
	                        sh "mvn -f maven ./maven/pom.xml  -DskipTests clean package"
	        	        }		
	                }
                    stage("Test"){
	        	        steps{
	        	            sh "mvn -f ./maven/pom.xml test -P coverage"  
	        	        }
	                }		
                }
            }
        }
    }
    post { 
        always { 
            echo 'finished !'
        }
    }
}



